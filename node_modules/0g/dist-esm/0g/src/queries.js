var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { EventEmitter } from 'events';
import { logger } from './logger';
var QueryEvents = /** @class */ (function (_super) {
    __extends(QueryEvents, _super);
    function QueryEvents() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return QueryEvents;
}(EventEmitter));
export { QueryEvents };
var Query = /** @class */ (function () {
    function Query(def) {
        this.def = def;
        this.entities = new Array();
        this.events = new QueryEvents();
    }
    Query.prototype.evaluate = function (entity) {
        var _a, _b;
        var hasAll = !((_a = this.def.all) === null || _a === void 0 ? void 0 : _a.length) ||
            this.def.all.every(function (spec) { return entity.maybeGet(spec); });
        var pass = hasAll &&
            (!((_b = this.def.none) === null || _b === void 0 ? void 0 : _b.length) ||
                this.def.none.every(function (spec) { return !entity.maybeGet(spec); }));
        if (pass) {
            this.add(entity);
        }
        else {
            this.remove(entity);
        }
    };
    Query.prototype.add = function (entity) {
        if (this.entities.includes(entity))
            return;
        this.entities.push(entity);
        entity.__queries.add(this);
        logger.debug("Added " + entity.id + " to " + this.key);
        this.events.emit('entityAdded', entity);
    };
    Query.prototype.remove = function (entity) {
        var index = this.entities.indexOf(entity);
        if (index !== -1) {
            this.entities.splice(index, 1);
            entity.__queries.delete(this);
            logger.debug("Removed " + entity.id + " from " + this.key);
            this.events.emit('entityRemoved', entity);
        }
    };
    Object.defineProperty(Query.prototype, "stats", {
        get: function () {
            return {
                count: this.entities.length,
            };
        },
        enumerable: false,
        configurable: true
    });
    Query.defToKey = function (def) {
        var _a, _b;
        return "a:" + ((_a = def.all) !== null && _a !== void 0 ? _a : [])
            .map(function (s) { return s.name; })
            .sort()
            .toString() + ",n:" + ((_b = def.none) !== null && _b !== void 0 ? _b : [])
            .map(function (s) { return s.name; })
            .sort()
            .toString();
    };
    Object.defineProperty(Query.prototype, "key", {
        get: function () {
            return Query.defToKey(this.def);
        },
        enumerable: false,
        configurable: true
    });
    return Query;
}());
export { Query };
//# sourceMappingURL=queries.js.map