var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { EventEmitter } from 'events';
import shortid from 'shortid';
import { Entity } from './entity';
import { ObjectPool } from './internal/objectPool';
import { logger } from './logger';
var EntityManagerEvents = /** @class */ (function (_super) {
    __extends(EntityManagerEvents, _super);
    function EntityManagerEvents() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EntityManagerEvents;
}(EventEmitter));
export { EntityManagerEvents };
var EntityManager = /** @class */ (function () {
    function EntityManager() {
        var _this = this;
        this.__game = null;
        this.events = new EntityManagerEvents();
        this.pool = new ObjectPool(function () { return new Entity(); });
        this._destroyList = new Array();
        this.entities = {};
        this.executeDestroys = function () {
            _this._destroyList.forEach(_this.executeDestroy);
            _this._destroyList.length = 0;
        };
        this.executeDestroy = function (id) {
            var entity = _this.entities[id];
            delete _this.entities[id];
            _this.pool.release(entity);
            _this.events.emit('entityRemoved', entity);
            _this.__game.queries.onEntityDestroyed(entity);
            logger.debug("Destroyed " + id);
        };
    }
    Object.defineProperty(EntityManager.prototype, "ids", {
        get: function () {
            return Object.keys(this.entities);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EntityManager.prototype, "entityList", {
        get: function () {
            return Object.values(this.entities);
        },
        enumerable: false,
        configurable: true
    });
    EntityManager.prototype.has = function (id) {
        return !!this.entities[id];
    };
    EntityManager.prototype.create = function (ownId) {
        if (ownId === void 0) { ownId = null; }
        var id = ownId || shortid();
        var ent = this.pool.acquire();
        ent.__game = this.__game;
        ent.id = id;
        this.entities[id] = ent;
        var registered = this.entities[id];
        this.events.emit('entityAdded', registered);
        this.__game.queries.onEntityCreated(registered);
        logger.debug("Added " + id);
        return registered;
    };
    EntityManager.prototype.destroy = function (id) {
        this._destroyList.push(id);
        logger.debug("Queueing " + id + " for destroy");
    };
    EntityManager.prototype.addStoreToEntity = function (entity, spec, initial) {
        logger.debug("Adding " + spec.name + " to " + entity.id);
        var data = this.__game.stores.acquire(spec);
        if (initial) {
            Object.assign(data, initial);
        }
        entity.__data.set(spec, data);
        this.events.emit('entityStoreAdded', entity);
        this.__game.queries.onEntityStoresChanged(entity);
        return data;
    };
    EntityManager.prototype.removeStoreFromEntity = function (entity, spec) {
        if (!entity.__data.has(spec))
            return entity;
        entity.__data.delete(spec);
        this.events.emit('entityStoreRemoved', entity);
        this.__game.queries.onEntityStoresChanged(entity);
        return entity;
    };
    EntityManager.prototype.serialize = function () {
        return this.entityList.map(this.serializeEntity);
    };
    EntityManager.prototype.serializeEntity = function (entity) {
        var e_1, _a;
        var s = {
            id: entity.id,
            data: {},
        };
        try {
            for (var _b = __values(entity.__data.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), spec = _d[0], dat = _d[1];
                // ephemeral, recreated at runtime on load
                if (spec.kind === 'state')
                    return;
                s.data[spec.name] = dat;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return s;
    };
    return EntityManager;
}());
export { EntityManager };
//# sourceMappingURL=entityManager.js.map