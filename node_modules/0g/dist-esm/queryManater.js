var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import { logger } from './logger';
import { Query } from './queries';
var QueryManager = /** @class */ (function () {
    function QueryManager() {
        var _this = this;
        this.queryCache = {};
        this.__game = null;
        this.onEntityCreated = function (entity) {
            var e_1, _a;
            try {
                // FIXME: perf?
                for (var _b = __values(Object.values(_this.queryCache)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var query = _c.value;
                    query.evaluate(entity);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        this.onEntityDestroyed = function (entity) {
            var e_2, _a;
            try {
                // FIXME: perf?
                for (var _b = __values(Object.values(_this.queryCache)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var query = _c.value;
                    // FIXME: not working
                    // if (entity.__queries.has(query)) {
                    query.remove(entity);
                    // }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        };
        this.onEntityStoresChanged = function (entity) {
            var e_3, _a;
            logger.debug("Entity stores changed: " + entity.id);
            try {
                // FIXME: perf?
                for (var _b = __values(Object.values(_this.queryCache)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var query = _c.value;
                    query.evaluate(entity);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
    }
    QueryManager.prototype.create = function (userDef) {
        var _this = this;
        var def = __assign({ all: [], none: [] }, userDef);
        var key = Query.defToKey(def);
        if (!this.queryCache[key]) {
            this.queryCache[key] = new Query(def);
        }
        // evaluate all existing entities
        this.__game.state.entityList.forEach(function (entity) {
            _this.queryCache[key].evaluate(entity);
        });
        return this.queryCache[key];
    };
    Object.defineProperty(QueryManager.prototype, "queryCount", {
        get: function () {
            return Object.keys(this.queryCache).length;
        },
        enumerable: false,
        configurable: true
    });
    return QueryManager;
}());
export { QueryManager };
//# sourceMappingURL=queryManater.js.map