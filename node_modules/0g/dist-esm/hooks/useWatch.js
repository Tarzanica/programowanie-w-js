var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { useCallback, useRef, useState } from 'react';
import { Query } from '../queries';
import { useFrame, useQueryFrame } from './useFrame';
export function useWatch(input, stores, callback) {
    if (input instanceof Query) {
        return useWatchQuery(input, stores, callback);
    }
    else {
        return useWatchEntity(input, stores, callback);
    }
}
function getStoreVersions(entity, stores) {
    return stores.map(function (store) { return entity.get(store).__version; }).join(',');
}
function useWatchQuery(query, stores, callback) {
    var _a = __read(useState(function () {
        return new WeakMap();
    }), 1), versionCache = _a[0];
    useQueryFrame(query, useCallback(function (entity) {
        var currentVersions = getStoreVersions(entity, stores);
        if (currentVersions !== versionCache.get(entity)) {
            versionCache.set(entity, currentVersions);
            callback(entity);
        }
    }, [versionCache, stores]));
}
function useWatchEntity(entity, stores, callback) {
    var versionsRef = useRef('');
    useFrame(useCallback(function () {
        var currentVersions = getStoreVersions(entity, stores);
        if (currentVersions !== versionsRef.current) {
            versionsRef.current = currentVersions;
            callback();
        }
    }, [versionsRef, entity, stores]));
}
//# sourceMappingURL=useWatch.js.map