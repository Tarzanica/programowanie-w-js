/// <reference types="node" />
import { Entity } from './entity';
import { EventEmitter } from 'events';
import { Store } from './stores';
export declare interface QueryEvents {
    on(event: 'entityAdded', callback: (entity: Entity) => void): this;
    on(event: 'entityRemoved', callback: (entity: Entity) => void): this;
    off(event: 'entityAdded', callback: (entity: Entity) => void): this;
    off(event: 'entityRemoved', callback: (entity: Entity) => void): this;
}
export declare class QueryEvents extends EventEmitter {
}
export declare type QueryDef = {
    all?: Store[];
    none?: Store[];
};
export declare class Query<Def extends QueryDef = QueryDef> {
    def: Def;
    entities: Entity[];
    events: QueryEvents;
    constructor(def: Def);
    evaluate(entity: Entity): void;
    add(entity: Entity): void;
    remove(entity: Entity): void;
    get stats(): {
        count: number;
    };
    static defToKey(def: QueryDef): string;
    get key(): string;
}
