"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Game = void 0;
var events_1 = require("events");
var input = __importStar(require("./input"));
var entityManager_1 = require("./entityManager");
var queryManager_1 = require("./queryManager");
var storeManager_1 = require("./storeManager");
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game(_a) {
        var stores = _a.stores, _b = _a.requestFrame, requestFrame = _b === void 0 ? requestAnimationFrame.bind(window) : _b, _c = _a.cancelFrame, cancelFrame = _c === void 0 ? cancelAnimationFrame.bind(window) : _c, _d = _a.initialPlayState, initialState = _d === void 0 ? 'running' : _d, _e = _a.systems, systems = _e === void 0 ? [] : _e;
        var _this = _super.call(this) || this;
        _this._entityManager = new entityManager_1.EntityManager();
        _this._queryManager = new queryManager_1.QueryManager();
        _this._storeManager = new storeManager_1.StoreManager();
        _this._lastFrameTime = null;
        _this._delta = 0;
        _this._time = 0;
        _this._frameHandle = 0;
        _this.get = function (id) {
            var _a;
            return (_a = _this.entities.entities[id]) !== null && _a !== void 0 ? _a : null;
        };
        _this.create = function (ownId) {
            if (ownId === void 0) { ownId = null; }
            return _this._entityManager.create(ownId);
        };
        _this.destroy = function (id) {
            return _this._entityManager.destroy(id);
        };
        _this.resume = function () {
            _this._playState = 'running';
            _this._lastFrameTime = null;
            _this.runFrame(performance.now());
            _this.emit('playStateChanged', _this._playState);
        };
        _this.pause = function () {
            _this._playState = 'paused';
            // TODO: does this make sense?
            // this._cancelRaf(this._frameHandle);
            _this.emit('playStateChanged', _this._playState);
        };
        _this.loadScene = function (serialized) {
            var e_1, _a, e_2, _b;
            try {
                for (var serialized_1 = __values(serialized), serialized_1_1 = serialized_1.next(); !serialized_1_1.done; serialized_1_1 = serialized_1.next()) {
                    var entry = serialized_1_1.value;
                    var spec = Object.keys(entry.data).map(function (storeKind) { return _this._stores[storeKind]; });
                    var entity = _this.create(entry.id);
                    try {
                        for (var spec_1 = (e_2 = void 0, __values(spec)), spec_1_1 = spec_1.next(); !spec_1_1.done; spec_1_1 = spec_1.next()) {
                            var store = spec_1_1.value;
                            entity.add(store, entry.data[store.name]);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (spec_1_1 && !spec_1_1.done && (_b = spec_1.return)) _b.call(spec_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (serialized_1_1 && !serialized_1_1.done && (_a = serialized_1.return)) _a.call(serialized_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        _this.saveScene = function () {
            return _this._entityManager.serialize();
        };
        _this.input = input;
        _this.runFrame = function (time) {
            if (_this._playState === 'running')
                _this._frameHandle = _this._raf(_this.runFrame);
            _this._time = time;
            _this._delta =
                _this._lastFrameTime != null ? time - _this._lastFrameTime : 16 + 2 / 3;
            _this.emit('step');
            // cleanup destroyed
            _this._entityManager.executeDestroys();
        };
        _this._entityManager.__game = _this;
        _this._queryManager.__game = _this;
        _this.setMaxListeners(Infinity);
        _this._stores = stores;
        _this._systems = systems;
        _this._systemInstances = systems.map(function (Sys) { return new Sys(_this); });
        _this._raf = requestFrame;
        _this._cancelRaf = cancelFrame;
        _this._playState = initialState;
        if (_this._playState === 'running') {
            _this.resume();
        }
        return _this;
    }
    Object.defineProperty(Game.prototype, "entities", {
        get: function () {
            return this._entityManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "storeSpecs", {
        get: function () {
            return this._stores;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "playState", {
        get: function () {
            return this._playState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "isPaused", {
        get: function () {
            return this._playState === 'paused';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "delta", {
        get: function () {
            return this._delta;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "time", {
        get: function () {
            return this._time;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "queries", {
        get: function () {
            return this._queryManager;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Game.prototype, "stores", {
        get: function () {
            return this._storeManager;
        },
        enumerable: false,
        configurable: true
    });
    return Game;
}(events_1.EventEmitter));
exports.Game = Game;
//# sourceMappingURL=Game.js.map