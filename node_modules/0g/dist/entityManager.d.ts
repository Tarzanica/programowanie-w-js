/// <reference types="node" />
import { EventEmitter } from 'events';
import { Entity } from './entity';
import { Game } from './Game';
import { ObjectPool } from './internal/objectPool';
import { Store, StoreInstanceFor } from './stores';
export declare interface EntityManagerEvents {
    on(ev: 'entityAdded', callback: (entity: Entity) => void): this;
    on(ev: 'entityRemoved', callback: (entity: Entity) => void): this;
    on(ev: 'entityStoreAdded', callback: (entity: Entity) => void): this;
    on(ev: 'entityStoreRemoved', callback: (entity: Entity) => void): this;
    off(ev: 'entityAdded', callback: (entity: Entity) => void): this;
    off(ev: 'entityRemoved', callback: (entity: Entity) => void): this;
}
export declare class EntityManagerEvents extends EventEmitter {
}
export declare class EntityManager {
    __game: Game;
    events: EntityManagerEvents;
    pool: ObjectPool<Entity>;
    _destroyList: string[];
    entities: Record<string, Entity>;
    get ids(): string[];
    get entityList(): Entity[];
    has(id: string): boolean;
    create(ownId?: string | null): Entity;
    destroy(id: string): void;
    addStoreToEntity<Spec extends Store>(entity: Entity, spec: Spec, initial?: Partial<StoreInstanceFor<Spec>>): import("./stores").StoreInstance;
    removeStoreFromEntity(entity: Entity, spec: Store): Entity;
    executeDestroys: () => void;
    private executeDestroy;
    serialize(): ({
        id: string;
        data: Record<string, any>;
    } | undefined)[];
    private serializeEntity;
}
