import { Poolable } from './internal/objectPool';
import { Constructor } from './types';
declare class BaseStore implements Poolable {
    static kind: string;
    static defaultValues: any;
    __alive: boolean;
    __version: number;
    set<T extends BaseStore>(this: T, values: Partial<T>): void;
    mark(): void;
    reset: () => void;
}
export declare class PersistentStore extends BaseStore {
    static kind: string;
}
export declare class StateStore extends BaseStore {
    static kind: string;
}
export declare type StoreInstance = PersistentStore | StateStore;
export declare type Store = Constructor<PersistentStore> | Constructor<StateStore>;
export declare type StoreInstanceFor<S extends Store> = S extends Constructor<infer T> ? T : never;
export {};
